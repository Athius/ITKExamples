#!/usr/bin/env python

""" Scripts to create a new example

./CreateNewExample.py /path/to/source/of/ITK

"""

import os
import sys

def GetGroupAndModuleFromClassName( itk_dir, class_name ):

    cmakefile = os.path.join( itk_dir, 'CMake', 'UseITK.cmake' )
    result = dict()
    result[ 'bool' ] = False

    if not os.path.exists( cmakefile ):
        print 'Error: wrong path'
    else:
      path = ''

      for root, dirs, files in os.walk( os.path.join( itk_dir, 'Modules' ) ):
          for f in files:
              if f == 'itk' + class_name + '.h':
                  path = root

      if len( path ) != 0:
          # let's extract the Group
          temp = path.strip( os.path.join( itk_dir, 'Modules' ) )
          temp = temp.strip( 'include' )

          GroupModule = temp.split( '/' )

          result[ 'Group' ] = GroupModule[ 0 ]
          result[ 'Module' ] = GroupModule[ 1 ]
          result[ 'bool' ] = True

      else:
          print 'Error: this class is not part of itk'

    return result

# beginning
temp_res = dict()
temp_res[ 'bool' ]= False;

while not temp_res[ 'bool' ]:
    class_name  = raw_input( "Please enter a class: " )
    temp_res = GetGroupAndModuleFromClassName( sys.argv[1], class_name )

group_name = temp_res[ 'Group' ]
module_name = temp_res[ 'Module' ]
example_name = raw_input( "Please enter an example name: " )


# Collect directories
root_dir = os.path.abspath( '@ITK_EXAMPLES_SOURCE_DIR@' )

example_src_dir = os.path.join( root_dir, "src/Examples" )
example_dir = os.path.join( example_src_dir, group_name, module_name, example_name )

if not os.path.exists( example_dir ):
    if not os.path.exists( os.path.join( example_src_dir, group_name ) ):
      os.mkdir( os.path.join( example_src_dir, group_name ) )
      # add_subdirectory( group_name ) in CMakeLists.txt
      f=open( os.path.join( example_src_dir, group_name, 'CMakeLists.txt' ), 'a' )
      f.write( 'add_subdirectory( ' + group_name + ' ) \n' )
      f.close()

      f=open( os.path.join( example_src_dir, group_name, 'CMakeLists.txt' ) , 'a' )
      f.write( '' )
      f.close()

      f=open( os.path.join( example_src_dir, group_name, 'index.rst' ), 'a' )
      f.write( group_name + '\n' )
      for i in range( len( group_name ) ):
          f.write( '=' )
      f.write( '\n\n' )

      f.write( '.. toctree::\n' )
      f.write( '  :maxdepth: 2\n\n' )
      f.close()

    if not os.path.exists( os.path.join( example_src_dir, group_name, module_name ) ):
        os.mkdir( os.path.join( example_src_dir, group_name, module_name ) )
        f=open( os.path.join( example_src_dir, group_name, 'CMakeLists.txt' ), 'a' )
        f.write( 'add_subdirectory( ' + module_name + ' )\n' )
        f.close()

        f=open( os.path.join( example_src_dir, group_name, 'index.rst' ), 'a' )
        f.write( '  ' + module_name + '/index.rst\n' )
        f.close()

        f=open( os.path.join( example_src_dir, group_name, module_name, 'CMakeLists.txt' ), 'a' )
        f.write( 'add_example( ' + example_name + ' )\n' )
        f.write( 'compare_to_baseline( ' + example_name + ' ' + example_name + 'Output)\n\n' )
        f.close()

        f=open( os.path.join( example_src_dir, group_name, module_name, 'index.rst' ), 'a' )
        f.write( module_name + '\n' )
        for i in range( len( module_name ) ):
            f.write( '=' )
        f.write( '\n\n' )

        f.write( '.. toctree::\n' )
        f.write( '  :maxdepth: 2\n\n' )

        f.write( '  ' + example_name + '/' + example_name + '.rst\n' )
        f.close()


    os.mkdir( example_dir )


example_base = os.path.join( example_dir, example_name )

example_rst = example_base + '.rst'
example_cxx = example_base + '.cxx'

# ---------------------------------------------------------
# Write rst file
f = open( example_rst, 'w' )
f.write( example_name +'\n' )
for i range( len( example_name ) ):
    f.write( '=' )
f.write( '\n\n' )

f.write( '.. index::' )
f.write( '  single: ' + class_name + '\n\n')

f.write( 'Synopsis\n' )
f.write( '--------\n' )

synopsis = raw_input( 'Synopsis: ' )
f.write( synopsis + '\n\n' )

f.write( 'Code\n' )
f.write( '----\n\n' )

f.write( 'C++\n' )
f.write( '...\n\n' )
f.write( '.. literalinclude:: ' + example_name + '.cxx\n\n' )

f.write( 'Results\n' )
f.write( '-------\n\n' )
f.write( '.. figure:: \n' )
f.write( '  :scale: 50%\n' )
f.write( '  :alt: Input image\n\n' )
f.write( '  Input image\n\n' )

f.write( '.. figure:: \n' )
f.write( '  :scale: 50%\n' )
f.write( '  :alt: Output image\n\n' )
f.write( '  Output image\n\n' )

f.write( 'Classes demonstrated\n' )
f.write( '--------------------\n\n' )

f.write( '.. doxygenclass: itk::' + class_name + '\n' )
f.write( '  :no-link:\n\n' )

f.write( '* `' + class_name + ' detailed doxygen documentation`_\n\n' )

f.write( '.. _' + class_name + ' detailed doxygen documentation:\n' )
f.write( '  http://www.itk.org/Doxygen/html/classitk_1_1' + class_name + '.html' )
f.close()

# ---------------------------------------------------------
# Write cxx file

f = open( example_cxx, 'w' )
f.write( '// \#include \"itkImage.h\n' )
f.write( '// \#include \"itkImageFileReader.h\n' )
f.write( '// \#include \"itkImageFileWriter.h\n' )
f.write( '\#include \"itk' + class_name + '.h\n\n' )

f.write( 'int main( int argc, char* argv[]\n' )
f.write( '{\n' )
f.write( '  // const unsigned int Dimension = 2;\n\n' )

f.write( '  // typedef unsigned char                      PixelType;\n' )
f.write( '  // typedef itk::Image< PixelType, Dimension > ImageType;\n\n' )

f.write( '  // typedef itk::ImageFileReader< ImageType >  ReaderType;\n' )
f.write( '  // ReaderType::Pointer reader = ReaderType::New();\n' )
f.write( '  // reader->SetInputFileName( argv[1] );\n' )
f.write( '  // reader->Update();\n\n' )

f.write( '  // typedef itk::' + class_name + '<> FilterType;\n' )
f.write( '  // FilterType::Pointer filter = FilterType::New();\n' )
f.write( '  // filter->SetInput( reader->GetOutput() );\n' )
f.write( '  // filter->Update();\n\n' )

f.write( '  // typedef itk::ImageFileWrite< ImageType > WriteType;\n' )
f.write( '  // WriterType::Pointer writer = WriterType::New();\n' )
f.write( '  // writer->SetInput( filter->GetOutput() );\n' )
f.write( '  // writer->Update();\n\n' )

f.write( 'return EXIT_SUCCESS;\n' )
f.write( '}\n' )
f.close()

# ---------------------------------------------------------
# Write CMakeLists.txt

cmakefile = os.path.join( example_dir, 'CMakeLists.txt' )
f=open( cmakefile, 'w' )

f.write( 'cmake_minimum_required( VERSION 2.8 )\n\n' )

f.write( 'project( ' + example_name + ' )\n\n' )

f.write( 'find_package( ITK REQUIRED )\n\n' )

f.write( 'if( ${ITK_FOUND} )\n' )
f.write( '  include( ${ITK_USE_FILE} )\n' )
f.write( 'endif()\n\n' )

f.write( 'add_executable( ' + example_name + ' ' +  example_name + '.cxx )\n' )
f.write( 'target_link_libraries( ' + example_name + ' ${ITK_LIBRARIES} )\n\n' )

f.write( 'enable_testing()\n' )
f.write( 'add_test( ' + example_name + 'Test ' + example_name + ' )\n' )
f.close()
