#!/usr/bin/env python

description = """
Archive binary data to Midas.

Make sure all the content link files are archived in Midas.
"""

import argparse
import fnmatch
import hashlib
import os
import sys

helper_modules_dir = os.path.join(os.path.abspath('/home/matt/progs/ITKExamples'),
    'Utilities')
sys.path.insert(0, os.path.join(helper_modules_dir, 'requests'))
sys.path.insert(0, os.path.join(helper_modules_dir, 'simplejson'))
sys.path.insert(0, os.path.join(helper_modules_dir, 'pydas'))
import pydas


def connect_to_midas(email=None, api_key=None):
    midas_url = 'http://midas3.kitware.com/midas/'
    if not api_key:
        print('Please enter your login information for ' + midas_url)
        pydas.login(url=midas_url, email=email)
    else:
        pydas.login(url=midas_url, email=email, api_key=api_key)
    session = pydas.session
    communicator = session.communicator
    return session, communicator


def upload_to_midas(content_link, externaldata_object_store, folders, session, communicator):
    # get the MD5 checksum
    print('Uploading ' + content_link + ' ...')
    with open(content_link, 'r') as fp:
        md5hash = fp.readline().strip()
    print('Checksum: ' + md5hash)

    # upload to Midas
    def get_child_folder(parent, child_name):
        children = communicator.folder_children(session.token, parent['folder_id'])
        for folder in children['folders']:
            if folder['name'] == child_name:
                return folder
        return None
    itk_community = communicator.get_community_by_name('ITK')
    itk_public = get_child_folder(itk_community, 'Public')
    itk_examples = get_child_folder(itk_public, 'ITKExamples')

    current_folder = itk_examples
    for folder in folders:
        current_folder = get_child_folder(current_folder, folder)
        if current_folder is None:
            sys.stderr.write('Could not find folder ' + folder + '\n')
            sys.exit(1)

    # get the existing or create a new item to hold the file
    item_name = os.path.basename(content_link[:-4])
    item_id = None
    current_folder_children = communicator.folder_children(session.token,
            current_folder['folder_id'])
    if current_folder_children.has_key('items'):
        for item in current_folder_children['items']:
            if item['name'] == item_name:
                item_id = item['item_id']
                break

    if item_id is None:
        new_item = communicator.create_item(session.token, item_name,
                current_folder['folder_id'])
        item_id = new_item['item_id']

    object_store = os.path.join(externaldata_object_store, 'MD5', md5hash)
    if not os.path.exists(object_store):
        sys.stderr.write('Could not find the expected object store.')
        sys.exit(1)

    upload_token = communicator.generate_upload_token(session.token,
            item_id,
            item_name,
            md5hash)
    if upload_token != "":
        communicator.perform_upload(upload_token,
                item_name,
                item_id=item_id,
                revision='head',
                filepath=object_store)


def run(itk_source_dir, externaldata_object_store,
        email=None, api_key=None):
    session, communicator = connect_to_midas(email, api_key)

    md5files = []
    for root, dirnames, filenames in os.walk(itk_source_dir):
        for filename in fnmatch.filter(filenames, '*.md5'):
            md5files.append(os.path.join(root, filename))

    for content_link in md5files:
        if content_link.find('Modules') == -1:
            uncategorized = True
        else:
            uncategorized = False

        if uncategorized:
            folders = ['Uncategorized']
        else:
            group_module_path = content_link.split('Modules')[1][1:]
            hiercharchy = group_module_path.split(os.path.sep)
            group = hiercharchy[0]
            module = hiercharchy[1]
            folders = [group, module]

        upload_to_midas(content_link, externaldata_object_store, folders,
                session, communicator)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description=description)
    parser.add_argument('--api-key-file', '-k', type=argparse.FileType('r'),
            help="A file that contains your Midas user's API key.")
    parser.add_argument('--email', '-e',
            help="Email address associated with your Midas account.")
    parser.add_argument('itk_source_dir',
            help='Path to the ITK source tree.')
    parser.add_argument('externaldata_object_store',
            help='Path to the ExternalData object store, e.g. ' \
            + 'ExternalData/Objects in a build tree.')
    args = parser.parse_args()

    if args.api_key_file:
        api_key = args.api_key_file.readline()
        api_key = api_key.strip()
    else:
        api_key = None

    run(args.itk_source_dir, args.externaldata_object_store,
        email=args.email, api_key=api_key)
